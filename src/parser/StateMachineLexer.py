# Generated from ../../StateMachine.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,25,197,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,
        13,1,13,1,13,4,13,131,8,13,11,13,12,13,132,1,13,1,13,1,14,1,14,1,
        14,5,14,140,8,14,10,14,12,14,143,9,14,1,15,1,15,1,15,1,15,1,16,1,
        16,5,16,151,8,16,10,16,12,16,154,9,16,1,17,1,17,1,18,1,18,3,18,160,
        8,18,1,19,4,19,163,8,19,11,19,12,19,164,1,19,1,19,4,19,169,8,19,
        11,19,12,19,170,3,19,173,8,19,1,20,4,20,176,8,20,11,20,12,20,177,
        1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
        1,27,1,28,1,28,1,29,1,29,0,0,30,1,1,3,2,5,3,7,4,9,5,11,0,13,0,15,
        6,17,7,19,8,21,9,23,10,25,11,27,12,29,13,31,14,33,15,35,0,37,0,39,
        16,41,0,43,17,45,18,47,19,49,20,51,21,53,22,55,23,57,24,59,25,1,
        0,4,1,0,97,122,1,0,65,90,3,0,9,10,13,13,32,32,3,0,65,90,95,95,97,
        122,201,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,39,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
        0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,
        0,0,1,61,1,0,0,0,3,63,1,0,0,0,5,65,1,0,0,0,7,67,1,0,0,0,9,69,1,0,
        0,0,11,71,1,0,0,0,13,73,1,0,0,0,15,75,1,0,0,0,17,88,1,0,0,0,19,94,
        1,0,0,0,21,110,1,0,0,0,23,113,1,0,0,0,25,121,1,0,0,0,27,127,1,0,
        0,0,29,136,1,0,0,0,31,144,1,0,0,0,33,148,1,0,0,0,35,155,1,0,0,0,
        37,159,1,0,0,0,39,162,1,0,0,0,41,175,1,0,0,0,43,179,1,0,0,0,45,181,
        1,0,0,0,47,183,1,0,0,0,49,185,1,0,0,0,51,187,1,0,0,0,53,189,1,0,
        0,0,55,191,1,0,0,0,57,193,1,0,0,0,59,195,1,0,0,0,61,62,5,123,0,0,
        62,2,1,0,0,0,63,64,5,125,0,0,64,4,1,0,0,0,65,66,5,59,0,0,66,6,1,
        0,0,0,67,68,5,91,0,0,68,8,1,0,0,0,69,70,5,93,0,0,70,10,1,0,0,0,71,
        72,7,0,0,0,72,12,1,0,0,0,73,74,7,1,0,0,74,14,1,0,0,0,75,76,5,83,
        0,0,76,77,5,116,0,0,77,78,5,97,0,0,78,79,5,116,0,0,79,80,5,101,0,
        0,80,81,5,77,0,0,81,82,5,97,0,0,82,83,5,99,0,0,83,84,5,104,0,0,84,
        85,5,105,0,0,85,86,5,110,0,0,86,87,5,101,0,0,87,16,1,0,0,0,88,89,
        5,115,0,0,89,90,5,116,0,0,90,91,5,97,0,0,91,92,5,116,0,0,92,93,5,
        101,0,0,93,18,1,0,0,0,94,95,5,99,0,0,95,96,5,111,0,0,96,97,5,109,
        0,0,97,98,5,112,0,0,98,99,5,111,0,0,99,100,5,115,0,0,100,101,5,105,
        0,0,101,102,5,116,0,0,102,103,5,101,0,0,103,104,5,32,0,0,104,105,
        5,115,0,0,105,106,5,116,0,0,106,107,5,97,0,0,107,108,5,116,0,0,108,
        109,5,101,0,0,109,20,1,0,0,0,110,111,5,45,0,0,111,112,5,62,0,0,112,
        22,1,0,0,0,113,114,5,73,0,0,114,115,5,78,0,0,115,116,5,73,0,0,116,
        117,5,84,0,0,117,118,5,73,0,0,118,119,5,65,0,0,119,120,5,76,0,0,
        120,24,1,0,0,0,121,122,5,70,0,0,122,123,5,73,0,0,123,124,5,78,0,
        0,124,125,5,65,0,0,125,126,5,76,0,0,126,26,1,0,0,0,127,130,5,39,
        0,0,128,131,3,13,6,0,129,131,3,11,5,0,130,128,1,0,0,0,130,129,1,
        0,0,0,131,132,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,134,1,
        0,0,0,134,135,5,39,0,0,135,28,1,0,0,0,136,141,3,13,6,0,137,140,3,
        11,5,0,138,140,3,13,6,0,139,137,1,0,0,0,139,138,1,0,0,0,140,143,
        1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,30,1,0,0,0,143,141,1,
        0,0,0,144,145,7,2,0,0,145,146,1,0,0,0,146,147,6,15,0,0,147,32,1,
        0,0,0,148,152,3,35,17,0,149,151,3,37,18,0,150,149,1,0,0,0,151,154,
        1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,34,1,0,0,0,154,152,1,
        0,0,0,155,156,7,3,0,0,156,36,1,0,0,0,157,160,3,35,17,0,158,160,2,
        48,57,0,159,157,1,0,0,0,159,158,1,0,0,0,160,38,1,0,0,0,161,163,2,
        48,57,0,162,161,1,0,0,0,163,164,1,0,0,0,164,162,1,0,0,0,164,165,
        1,0,0,0,165,172,1,0,0,0,166,168,5,46,0,0,167,169,2,48,57,0,168,167,
        1,0,0,0,169,170,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,173,
        1,0,0,0,172,166,1,0,0,0,172,173,1,0,0,0,173,40,1,0,0,0,174,176,2,
        48,57,0,175,174,1,0,0,0,176,177,1,0,0,0,177,175,1,0,0,0,177,178,
        1,0,0,0,178,42,1,0,0,0,179,180,5,40,0,0,180,44,1,0,0,0,181,182,5,
        41,0,0,182,46,1,0,0,0,183,184,5,43,0,0,184,48,1,0,0,0,185,186,5,
        45,0,0,186,50,1,0,0,0,187,188,5,42,0,0,188,52,1,0,0,0,189,190,5,
        47,0,0,190,54,1,0,0,0,191,192,5,61,0,0,192,56,1,0,0,0,193,194,5,
        46,0,0,194,58,1,0,0,0,195,196,5,94,0,0,196,60,1,0,0,0,11,0,130,132,
        139,141,152,159,164,170,172,177,1,6,0,0
    ]

class StateMachineLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    STATEMACHINE = 6
    STATE = 7
    COMPOSITE_STATE = 8
    TRANSITION_SYMBOL = 9
    INITIAL = 10
    FINAL = 11
    TEXT = 12
    NAME = 13
    WS = 14
    VARIABLE = 15
    NUMBER = 16
    LPAREN = 17
    RPAREN = 18
    PLUS = 19
    MINUS = 20
    TIMES = 21
    DIV = 22
    EQ = 23
    POINT = 24
    POW = 25

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "';'", "'['", "']'", "'StateMachine'", "'state'", 
            "'composite state'", "'->'", "'INITIAL'", "'FINAL'", "'('", 
            "')'", "'+'", "'-'", "'*'", "'/'", "'='", "'.'", "'^'" ]

    symbolicNames = [ "<INVALID>",
            "STATEMACHINE", "STATE", "COMPOSITE_STATE", "TRANSITION_SYMBOL", 
            "INITIAL", "FINAL", "TEXT", "NAME", "WS", "VARIABLE", "NUMBER", 
            "LPAREN", "RPAREN", "PLUS", "MINUS", "TIMES", "DIV", "EQ", "POINT", 
            "POW" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "LOWERCASE", "UPPERCASE", 
                  "STATEMACHINE", "STATE", "COMPOSITE_STATE", "TRANSITION_SYMBOL", 
                  "INITIAL", "FINAL", "TEXT", "NAME", "WS", "VARIABLE", 
                  "VALID_ID_START", "VALID_ID_CHAR", "NUMBER", "UNSIGNED_INTEGER", 
                  "LPAREN", "RPAREN", "PLUS", "MINUS", "TIMES", "DIV", "EQ", 
                  "POINT", "POW" ]

    grammarFileName = "StateMachine.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


